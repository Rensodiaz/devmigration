<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on DevMigration</title>
    <link>https://www.devmigration.com/categories/articles/</link>
    <description>Recent content in Articles on DevMigration</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 09 Aug 2020 23:02:54 -0400</lastBuildDate>
    
	<atom:link href="https://www.devmigration.com/categories/articles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Express file structure (part 2)</title>
      <link>https://www.devmigration.com/article/express-file-structure/</link>
      <pubDate>Sun, 09 Aug 2020 23:02:54 -0400</pubDate>
      
      <guid>https://www.devmigration.com/article/express-file-structure/</guid>
      <description>Welcome back to part two of our Express tutorial, in this part we are going to talk about express file structure and what exactly I mean by file structure. Also we will go over how to create a configuration file and use it to change to different environments of development.
Express like many other NodeJS backend frameworks like restify, fastify, etc. Don’t really come with a file structure that we have to follow, you can structure your backend application any way you like but for the purpose of this journey we will use a MVC design pattern.</description>
    </item>
    
    <item>
      <title>Favicon, adding identity to your web application</title>
      <link>https://www.devmigration.com/article/change-fav-icon/</link>
      <pubDate>Thu, 06 Aug 2020 23:02:54 -0400</pubDate>
      
      <guid>https://www.devmigration.com/article/change-fav-icon/</guid>
      <description>Favicon is not very noticeable at first but if you are like me, it will stand out when you have a lot of tabs open in your browser. Frameworks like Angular come with their brand icon by default already but what about if we want to change it with our own icon.
Well look not further we will go into the details on how to do it step by step:</description>
    </item>
    
    <item>
      <title>Express for beginners (part 1)</title>
      <link>https://www.devmigration.com/article/express-first-app/</link>
      <pubDate>Thu, 30 Jul 2020 23:02:54 -0400</pubDate>
      
      <guid>https://www.devmigration.com/article/express-first-app/</guid>
      <description>Welcome to the first part of our journey, this is going to be a small series with multiple posts to help you dive right into Express framework and Node.js. Don’t worry if you don’t have any previous experience with Express or Node.js. This tutorial is designed with that in mind and will try to be as clear as possible. We will cover the backend logic only in this series and in the future we may also create another small tutorial on how to integrate a view engine like Pug, Ejs, etc.</description>
    </item>
    
  </channel>
</rss>